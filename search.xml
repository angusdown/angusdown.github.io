<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>win10-vs2015-osgearth2.10</title>
    <url>/2020/03/23/win10-vs2015-osgearth2-10/</url>
    <content><![CDATA[<h2 id="osg编译">OSG编译</h2>
<h3 id="源码或预编译库下载">源码或预编译库下载</h3>
<p>OSG版本3.6.3； CMake版本3.12.1-x64； Geos版本：3.7.1； GDAL版本：2.3.1； 数据包由官网下载； 官网上还提供其他vs2015环境下OSG编译依赖的第三方库所用的CMake编译脚本，其地址为<a href="https://github.com/bjornblissing/osg-3rdparty-cmake" target="_blank" rel="noopener" class="uri">https://github.com/bjornblissing/osg-3rdparty-cmake</a> 同时该页面提供由AppVeyor所预编译好的vs2015和vs2017的库文件下载。 <a id="more"></a></p>
<h3 id="文件目录">文件目录</h3>
<p>D:.3 D:\3rd-v140-x64：第三方依赖库 D:-Data：数据包解压后放于此。</p>
<h3 id="cmake配置">CMake配置</h3>
<p>在configure后，选择列表项ACTUAL_3RDPARTY_DIR将值设置为D:/OSG/3rd-v140-x64，BUILD_OSG_EXAMPLES值设置为ON，设置CMAKE_INSTALL_PREFIX为最后的编译好的库文件复制安装路径。</p>
<h3 id="vs2015编译">vs2015编译</h3>
<p>打开OpenSceneGraph.sln，生成All_BUILD，可只选择Release版本。</p>
<h3 id="设置环境变量">设置环境变量</h3>
<p>添加系统变量：OSG_FILE_PATH，值为D:-Data；在PATH变量中添加：D:.3。配置完成后，可在命令行输入osgversion测试。</p>
<h2 id="编译安装osgearth依赖项">编译安装OSGEarth依赖项</h2>
<p>编译GEOS、GDAL、CURL、ZLIB等；</p>
<h2 id="编译安装osgearth">编译安装OSGEarth</h2>
<p>在CMake中指定OSG_DIR为D:.3，指定THIRD_PARTY_DIR为D:/OSG/3rd-v140-x64；依次对CURL、GDAL、GEOS、ZLIB进行处理（若系统环境变量中设置了相关库name和value，则会自动查找配置），然后勾上Advanced。</p>
]]></content>
      <categories>
        <category>osgearth</category>
      </categories>
  </entry>
  <entry>
    <title>Tesla/Quadro-vs-GeForce</title>
    <url>/2020/03/22/Tesla-Quadro-vs-GeForce/</url>
    <content><![CDATA[<p>该资源由Microway根据NVIDIA和可信媒体来源提供的数据编写。 所有NVIDIA GPU都支持通用计算（GPGPU），但并非所有GPU都提供相同的性能或支持相同的功能。GeForce GPU的消费者产品线（特别是GTX Titan）可能对那些运行GPU加速应用程序的人很有吸引力。但是，记住产品之间的差异是明智的。专业的Tesla和Quadro GPU有许多功能。 <a id="more"></a></p>
<h3 id="fp64-64位双精度浮点计算">FP64 64位（双精度）浮点计算</h3>
<p>许多应用需要更高精度的数学计算。在这些应用程序中，数据由两倍大的值表示（使用64位二进制位而不是32位）。这些较大的值称为双精度（64位）。不太准确的值称为单精度（32位）。虽然几乎所有NVIDIA GPU产品都支持单精度和双精度计算，但在大多数消费级GeForce GPU上，双精度值的性能要低得多。以下是GeForce和Tesla / Quadro GPU之间双精度浮点计算性能的比较：</p>
<table>
<thead>
<tr class="header">
<th>NVIDIA GPU模型</th>
<th>双精度（64位）浮点性能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GeForce GTX Titan X Maxwell</td>
<td>高达0.206 TFLOPS</td>
</tr>
<tr class="even">
<td>GeForce GTX 1080 Ti</td>
<td>高达0.355 TFLOPS</td>
</tr>
<tr class="odd">
<td>GeForce Titan Xp</td>
<td>高达0.380 TFLOPS</td>
</tr>
<tr class="even">
<td>GeForce Titan V.</td>
<td>高达6.875 TFLOPS</td>
</tr>
<tr class="odd">
<td>GeForce RTX 2080 Ti</td>
<td>估计~0.44 TFLOPS</td>
</tr>
<tr class="even">
<td>特斯拉K80</td>
<td>1.87+ TFLOPS</td>
</tr>
<tr class="odd">
<td>特斯拉P100 *</td>
<td>4.7~5.3 TFLOPS</td>
</tr>
<tr class="even">
<td>Quadro GP100</td>
<td>5.2 TFLOPS</td>
</tr>
<tr class="odd">
<td>特斯拉V100 *</td>
<td>7~7.8 TFLOPS</td>
</tr>
<tr class="even">
<td>Quadro GV100</td>
<td>7.4 TFLOPS</td>
</tr>
<tr class="odd">
<td>Quadro RTX 6000和8000</td>
<td>~0.5 TFLOPS</td>
</tr>
<tr class="even">
<td>特斯拉T4</td>
<td>估计~0.25 TFLOPS</td>
</tr>
</tbody>
</table>
<p>*确切的值取决于PCI-Express或SXM2 SKU</p>
<h3 id="fp16-16位半精度浮点计算">FP16 16位（半精度）浮点计算</h3>
<p>一些应用程序不需要高精度（例如，神经网络训练/推理和某些HPC使用）。在“Pascal”GPU中 引入了对半精度FP16操作的支持。这是以前深度学习/人工智能计算的标准; 但是，深度学习工作负载已转移到更复杂的操作（请参阅下面的TensorCores）。尽管所有NVIDIA“Pascal”和后来的GPU都支持FP16，但在许多以游戏为中心的GPU上，性能显着降低。以下是GeForce和Tesla / Quadro GPU之间半精度浮点计算性能的比较：</p>
<table>
<thead>
<tr class="header">
<th>NVIDIA GPU模型</th>
<th>半精度（16位）浮点性能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GeForce GTX Titan X Maxwell</td>
<td>N / A</td>
</tr>
<tr class="even">
<td>GeForce GTX 1080 Ti</td>
<td>小于0.177 TFLOPS</td>
</tr>
<tr class="odd">
<td>GeForce Titan Xp</td>
<td>小于0.190 TFLOPS</td>
</tr>
<tr class="even">
<td>GeForce Titan V.</td>
<td>~27.5 TFLOPS</td>
</tr>
<tr class="odd">
<td>GeForce RTX 2080 Ti</td>
<td>28.5 TFLOPS</td>
</tr>
<tr class="even">
<td>特斯拉K80</td>
<td>N / A</td>
</tr>
<tr class="odd">
<td>特斯拉P100 *</td>
<td>18.7~21.2 TFLOPS *</td>
</tr>
<tr class="even">
<td>Quadro GP100</td>
<td>20.7 TFLOPS</td>
</tr>
<tr class="odd">
<td>特斯拉V100 *</td>
<td>28~31.4 TFLOPS *</td>
</tr>
<tr class="even">
<td>Quadro GV100</td>
<td>29.6 TFLOPS</td>
</tr>
<tr class="odd">
<td>Quadro RTX 6000和8000</td>
<td>32.6 TFLOPS</td>
</tr>
<tr class="even">
<td>特斯拉T4</td>
<td>16.2 TFLOPS</td>
</tr>
</tbody>
</table>
<p>*确切的值取决于PCI-Express或SXM2 SKU</p>
<h3 id="tensorflops和深度学习表现">TensorFLOPS和深度学习表现</h3>
<p>一个新的专业的Tensor Core单元与“Volta”GPU一起推出。它将两个FP16单元（转换为全精度产品）与FP32累加运算相结合 - 这是深度学习训练计算中使用的精确操作。NVIDIA现在通过一种新的深度学习性能指标测量Tensor Core的GPU：一个名为TensorTFLOPS的新单元。</p>
<p>Tensor Core仅适用于“Volta”GPU或更新版本。作为参考，如果没有TensorFLOPS值，我们将以任何精度提供最大的已知深度学习性能。我们认为，比较不同精度之间的表现是非常差的科学方法; 然而，我们也认识到希望在不同代GPU的深度学习性能之间至少看到一个数量级的性能比较。</p>
<table>
<thead>
<tr class="header">
<th>NVIDIA GPU模型</th>
<th>TensorFLOPS （或最大DL性能）</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GeForce GTX Titan X Maxwell</td>
<td>N / A TensorTFLOPS, ~6.1 TFLOPS FP32</td>
</tr>
<tr class="even">
<td>GeForce GTX 1080 Ti</td>
<td>N / A TensorTFLOPS, ~11.3 TFLOPS FP32</td>
</tr>
<tr class="odd">
<td>GeForce Titan Xp</td>
<td>N / A TensorTFLOPS, ~12.1 TFLOPS FP32</td>
</tr>
<tr class="even">
<td>GeForce Titan V. 110</td>
<td>TensorTFLOPS</td>
</tr>
<tr class="odd">
<td>GeForce RTX 2080 Ti</td>
<td>56.9 TensorTFLOPS 455.4 TOPS, INT4用于推理</td>
</tr>
<tr class="even">
<td>特斯拉K80</td>
<td>N / A TensorTFLOPS ,5.6 TFLOPS FP32</td>
</tr>
<tr class="odd">
<td>特斯拉P100 *</td>
<td>N / A TensorTFLOPS ,18.7~21.2 TFLOPS FP16</td>
</tr>
<tr class="even">
<td>Quadro GP100</td>
<td>N / A TensorTFLOPS ,20.7 TFLOPS FP16</td>
</tr>
<tr class="odd">
<td>特斯拉V100 *</td>
<td>112~125 TensorTFLOPS</td>
</tr>
<tr class="even">
<td>Quadro GV100</td>
<td>118.5 TensorTFLOPS</td>
</tr>
<tr class="odd">
<td>Quadro RTX 6000和8000</td>
<td>130.5 TensorTFLOPS 522 TOPS, INT4用于推理</td>
</tr>
<tr class="even">
<td>特斯拉T4</td>
<td>65 TensorTFLOPS 260 TOPS, INT4用于推理</td>
</tr>
</tbody>
</table>
<p>*确切的值取决于PCI-Express或SXM2 SKU</p>
<h3 id="错误检测和纠正">错误检测和纠正</h3>
<p>在运行计算机游戏的GPU上，一个存储器错误通常不会引起任何问题（例如，一帧的一个像素颜色可能不正确）。用户甚至不太可能意识到这个问题。但是，技术计算应用程序依赖于GPU返回的数据的准确性。对于某些应用程序，单个错误可能导致严重且明显的错误。对于其他人来说，单比特位错误可能不容易检测（返回看似合理的错误结果）。Titan GPU不包括纠错或错误检测功能。如果发生错误，GPU和系统都不会警告用户错误。用户可以检测错误（它们是否会导致应用程序崩溃，明显错误的数据，或者是不明显的错误数据）。这些问题并不少见 - 我们的技术人员经常在消费者游戏GPU上遇到内存错误。NVIDIA Tesla GPU能够纠正单比特错误并检测和警告双比特错误。在最新的Tesla V100，Tesla T4，Tesla P100和Quadro GV100 / GP100 GPU上，ECC支持包含在主HBM2内存中，以及寄存器文件，共享内存，L1缓存和L2缓存中。</p>
<h3 id="保修和最终用户许可协议">保修和最终用户许可协议</h3>
<p>NVIDIA对GeForce GPU产品的保修明确规定GeForce产品不适合安装在服务器上。在服务器系统中运行GeForce GPU将使GPU的保修失效，用户自担风险。来自NVIDIA的制造商保修网站：</p>
<p>保证产品仅供消费者最终用户使用，不适用于数据中心使用和/或GPU集群商业部署（“企业使用”）。使用保证产品用于企业使用将使本保修失效。</p>
<p>NVIDIA GeForce产品驱动程序软件附带的许可协议声明：</p>
<p>禁止数据中心部署。除了允许数据中心中的区块链处理之外，该软件未获得数据中心部署许可。</p>
<h3 id="gpu内存性能">GPU内存性能</h3>
<p>计算密集型应用程序需要高性能计算单元，但快速访问数据也很关键。对于许多HPC应用程序，除非内存性能也得到改善，否则计算性能的提高无济于事。因此，Tesla GPU提供比GeForce GPU更好的实际性能：</p>
<table>
<thead>
<tr class="header">
<th>NVIDIA GPU模型</th>
<th>GPU内存带宽</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GeForce GTX Titan X Maxwell</td>
<td>336 GB / s</td>
</tr>
<tr class="even">
<td>GeForce GTX 1080 Ti</td>
<td>484 GB / s</td>
</tr>
<tr class="odd">
<td>GeForce Titan Xp</td>
<td>548 GB / s</td>
</tr>
<tr class="even">
<td>GeForce Titan V.</td>
<td>653 GB / s</td>
</tr>
<tr class="odd">
<td>GeForce RTX 2080 Ti</td>
<td>616 GB / s</td>
</tr>
<tr class="even">
<td>特斯拉K80</td>
<td>480 GB / s</td>
</tr>
<tr class="odd">
<td>特斯拉P40</td>
<td>346 GB / s</td>
</tr>
<tr class="even">
<td>特斯拉P100 12GB</td>
<td>549 GB / s</td>
</tr>
<tr class="odd">
<td>特斯拉P100 16GB</td>
<td>732 GB / s</td>
</tr>
<tr class="even">
<td>Quadro GP100</td>
<td>717 GB / s</td>
</tr>
<tr class="odd">
<td>特斯拉V100 16GB / 32GB</td>
<td>900 GB / s</td>
</tr>
<tr class="even">
<td>Quadro GV100</td>
<td>870 GB / s</td>
</tr>
<tr class="odd">
<td>Quadro RTX 6000和8000</td>
<td>624 GB / s</td>
</tr>
<tr class="even">
<td>特斯拉T4</td>
<td>320 GB / s</td>
</tr>
</tbody>
</table>
<h3 id="gpu内存大小">GPU内存大小</h3>
<p>通常，系统运行的内存越多，运行的速度就越快。对于某些HPC应用程序，除非有足够的内存，否则甚至无法执行单次运行。对于其他人来说，除非有足够的内存，否则结果的质量和保真度会降低。Tesla GPU提供的内存是GeForce GPU的两倍：</p>
<table>
<thead>
<tr class="header">
<th>GPU 模型</th>
<th>内存容量</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>GeForce GTX 1080 Ti</td>
<td>11GB</td>
</tr>
<tr class="even">
<td>GeForce Titan Xp</td>
<td>12GB</td>
</tr>
<tr class="odd">
<td>GeForce GTX Titan V.</td>
<td>12GB</td>
</tr>
<tr class="even">
<td>GeForce RTX 2080 Ti</td>
<td>11GB</td>
</tr>
<tr class="odd">
<td>特斯拉K80</td>
<td>24GB</td>
</tr>
<tr class="even">
<td>特斯拉P40</td>
<td>24GB</td>
</tr>
<tr class="odd">
<td>特斯拉P100</td>
<td>12GB或16GB *</td>
</tr>
<tr class="even">
<td>Quadro GP100</td>
<td>16GB *</td>
</tr>
<tr class="odd">
<td>特斯拉V100</td>
<td>16GB或32GB *</td>
</tr>
<tr class="even">
<td>Quadro GV100</td>
<td>32GB *</td>
</tr>
<tr class="odd">
<td>Quadro RTX 6000</td>
<td>24GB *</td>
</tr>
<tr class="even">
<td>Quadro RTX 8000</td>
<td>48GB *</td>
</tr>
<tr class="odd">
<td>特斯拉T4</td>
<td>16GB *</td>
</tr>
</tbody>
</table>
<p>*请注意，特斯拉/ Quadro统一内存允许GPU共享彼此的内存以加载更大的数据集</p>
<h3 id="pci-e与nvlink---设备到主机和设备到设备的吞吐量">PCI-E与NVLink - 设备到主机和设备到设备的吞吐量</h3>
<p>最大的潜在瓶颈之一是等待数据传输到GPU。当多个GPU并行运行时，存在额外的瓶颈。更快的数据传输直接导致更快的应用程序性能。GeForce GPU通过PCI-Express连接，其理论峰值吞吐量为16GB / s。配备NVLink的NVIDIA Tesla / Quadro GPU能够更快地实现连接。NVIDIA的“Pascal”中的NVLink 允许每个GPU以高达80GB / s（160GB / s双向）的速度进行通信。NVIDIA的“Volta”系列中的NVLink 2.0 允许每个GPU以高达150GB / s（300GB / s双向）的速度进行通信。GPU之间以及支持的OpenPOWER平台上的CPU和GPU之间支持NVLink连接。</p>
<h3 id="应用软件支持">应用软件支持</h3>
<p>虽然某些软件程序能够在支持CUDA的任何GPU上运行，但其他软件程序则针对专业GPU系列进行了设计和优化。大多数专业软件包仅正式支持NVIDIA Tesla和Quadro GPU。使用GeForce GPU是可能的，但软件供应商不会支持。在其他情况下，在GeForce GPU（例如，Schrödinger，LLC的软件产品）上启动时，应用程序根本不起作用。</p>
<h3 id="操作系统支持">操作系统支持</h3>
<p>虽然NVIDIA的GPU驱动程序非常灵活，但是没有适用于Windows Server操作系统的GeForce驱动程序。GeForce GPU仅在Windows 7，Windows 8和Windows 10上受支持。使用Windows Server的组应该使用NVIDIA专业的Tesla和Quadro GPU产品。另一方面，Linux驱动程序支持所有NVIDIA GPU。</p>
<h3 id="产品生命周期">产品生命周期</h3>
<p>由于消费者GPU市场的性质，GeForce产品的生命周期相对较短（产品发布和生产结束之间通常不超过一年）。需要更长产品寿命的项目（例如购买后3年以上可能需要更换部件的项目）应使用专业GPU。NVIDIA专业的Tesla和Quadro GPU产品具有延长的生命周期和制造商的长期支持（包括产品生命终结的通知以及停止生产前的最后购买机会）。此外，专业GPU在生产过程中经历了更彻底的测试和验证过程。</p>
<h3 id="电源效率">电源效率</h3>
<p>GeForce GPU适用于消费者游戏，通常不是为提高电源效率而设计的。相比之下，Tesla GPU专为大规模部署而设计，其中功率效率非常重要。这使得Tesla GPU成为大型安装的更好选择。例如，GeForce GTX Titan X非常适合桌面深度学习工作负载。在服务器部署中，Tesla P40 GPU提供匹配的性能和双倍的内存容量。然而，当并排放置时，特斯拉消耗更少的电力并产生更少的热量。</p>
<h3 id="dma引擎">DMA引擎</h3>
<p>GPU的直接内存访问（DMA）引擎允许在系统内存和GPU内存之间进行快速数据传输。由于此类传输是任何实际应用程序的一部分，因此性能对GPU加速至关重要。缓慢的传输导致GPU核心处于空闲状态，直到数据到达GPU内存。同样，慢速返回会导致CPU等待，直到GPU完成返回结果。</p>
<p>GeForce产品具有单个DMA引擎*，可以一次传输一个方向的数据。如果正在将数据上载到GPU，则在上载完成之前，无法返回由GPU计算的任何结果。同样，从GPU返回的结果将阻止需要上传到GPU的任何新数据。Tesla GPU产品采用双DMA引擎来缓解这一瓶颈。数据可以同时传输到GPU和GPU中。</p>
<p>*一个GeForce GPU型号，GeForce GTX Titan X，具有双DMA引擎</p>
<h3 id="gpu直接rdma">GPU直接RDMA</h3>
<p>NVIDIA的GPU-Direct技术可以极大地提高GPU之间的数据传输速度。各种功能由GPU-Direct保护，但RDMA功能可带来最大的性能提升。传统上，在群集的GPU之间发送数据需要3个内存副本（一次到GPU的系统内存，一次到CPU的系统内存，一次到InfiniBand驱动程序的内存）。GPU Direct RDMA删除系统内存副本，允许GPU直接通过InfiniBand将数据发送到远程系统。实际上，对于小型MPI消息大小，这减少延迟高达67％，带宽增加430％[ 1 ]。在CUDA 8.0版中，NVIDIA推出了GPU Direct RDMA ASYNC，允许GPU在不与CPU进行任何交互的情况下启动RDMA传输。</p>
<p>GeForce GPU不支持GPU-Direct RDMA。虽然MPI调用仍将成功返回，但传输将通过标准内存复制路径执行。GeForce卡支持的唯一GPU-Direct形式是GPU Direct Peer-to-Peer（P2P）。这允许在单个计算机内进行快速传输，但对于跨多个服务器/计算节点运行的应用程序不执行任何操作。Tesla GPU完全支持GPU Direct RDMA和各种其他GPU Direct功能。它们是这些功能的主要目标，因此在该领域经过最多的测试和使用。</p>
<h3 id="hyper-q">Hyper-Q</h3>
<p>用于MPI和CUDA Streams的Hyper-Q代理允许多个CPU线程或进程在单个GPU上启动工作。这对于使用MPI编写的现有并行应用程序尤为重要，因为这些代码旨在利用多个CPU内核。允许GPU接受系统上运行的每个MPI线程的工作可以提供潜在的显着性能提升。它还可以减少将GPU加速添加到现有应用程序所需的源代码重新架构量。但是，GeForce GPU支持的唯一Hyper-Q形式是CUDA Streams的Hyper-Q。这允许GeForce有效地接受并运行来自不同CPU核心的并行计算，但是跨多台计算机运行的应用程序将无法有效地在GPU上启动工作。</p>
<h3 id="gpu健康监控和管理功能">GPU健康监控和管理功能</h3>
<p>许多运行状况监控和GPU管理功能（对于维护多个GPU系统至关重要）仅在专业的Tesla GPU上得到支持。GeForce GPU不支持的健康功能包括：</p>
<ul>
<li>NVML/nvidia-smi用于监视和管理每个GPU的状态和功能。这使得许多第三方应用程序和工具（如Ganglia）支持GPU。Perl和Python绑定也可用。</li>
<li>OOB（通过IPMI进行带外监控）允许系统监控GPU运行状况，调整风扇速度以适当冷却设备并在发现问题时发送警报</li>
<li>InfoROM（持久配置和状态数据）为系统提供有关每个GPU的附加数据</li>
<li>NVHealthmon实用程序为集群管理员提供了即用型GPU健康状态工具</li>
<li>TCC允许将GPU专门设置为仅显示或仅计算模式</li>
<li>ECC（内存错误检测和纠正） 群集工具依赖于NVIDIA NVML提供的功能。大约60％的功能在GeForce上不可用 - 该表提供了对Tesla和GeForce GPU支持的NVML功能的更详细比较：</li>
</ul>
<table>
<thead>
<tr class="header">
<th>特征</th>
<th>Tesla</th>
<th>Geforce</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>产品名称</td>
<td>是</td>
<td>是</td>
</tr>
<tr class="even">
<td>显示GPU计数</td>
<td>是</td>
<td>是</td>
</tr>
<tr class="odd">
<td>PCI-Express生成（例如，2.0 vs 3.0）</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>PCI-Express链接宽度（例如，x4，x8，x16）</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>当前风扇速度</td>
<td>是</td>
<td>是</td>
</tr>
<tr class="even">
<td>当前温度</td>
<td>是</td>
<td>是*</td>
</tr>
<tr class="odd">
<td>目前的表现状况</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>时钟节流状态</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>当前GPU使用率（百分比）</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>当前内存使用率（百分比）</td>
<td>是</td>
<td>是</td>
</tr>
<tr class="odd">
<td>GPU提升能力</td>
<td>是</td>
<td>是^</td>
</tr>
<tr class="even">
<td>ECC错误检测/更正支持</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>列出已退休的页面</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>目前的权力抽奖</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>设置功率限制</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>当前GPU时钟速度</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>当前内存时钟速度</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>显示可用的时钟速度</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>显示可用的内存速度</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>设置GPU提升速度（核心时钟和内存时钟）</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>显示当前计算过程</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>卡序列号</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>InfoROM图像和对象</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="even">
<td>会计能力（每个流程的资源使用）</td>
<td>是</td>
<td>-</td>
</tr>
<tr class="odd">
<td>PCI-Express ID</td>
<td>是</td>
<td>是</td>
</tr>
<tr class="even">
<td>NVIDIA驱动程序版本</td>
<td>是</td>
<td>是</td>
</tr>
<tr class="odd">
<td>NVIDIA VBIOS版本</td>
<td>是</td>
<td>是</td>
</tr>
</tbody>
</table>
<p>*系统平台无法读取温度，这意味着无法调整风扇速度。</p>
<p>^双精度计算期间禁用GPU Boost。此外，在某些情况下，GeForce时钟速度将自动降低。</p>
<h3 id="gpu加速">GPU加速</h3>
<p>所有最新的NVIDIA GPU产品都支持GPU Boost，但它们的实现方式因预期的使用场景而异。GeForce卡专为交互式桌面使用和游戏而设计。Tesla GPU专为密集，恒定数量的运算而设计，稳定性和可靠性非常高。鉴于这两个用例之间的差异，GPU Boost在特斯拉上的功能与在GeForce上的不同。</p>
<h4 id="gpu如何在geforce上运行">GPU如何在GeForce上运行</h4>
<p>在Geforce的情况下，显卡会根据GPU的温度自动确定时钟速度和电压。温度是适当的自变量，因为发热会影响风扇速度。对于图形较少的游戏或一般桌面使用，最终用户可以享受更安静的计算体验。然而，在玩需要严格GPU计算的游戏时，GPU Boost会自动提高电压和时钟速度（也会产生更多噪音）。</p>
<h4 id="gpu如何在特斯拉上工作">GPU如何在特斯拉上工作</h4>
<p>另一方面，特斯拉的GPU加速水平也可以通过电压和温度来确定，但不总是以这种方式运行。</p>
<p>如果愿意，可以由系统管理员或计算用户指定增强 - 可以将所需的时钟速度设置为特定频率。除了将时钟速度浮动到各种电平之外，可以静态地保持期望的时钟速度，除非达到功耗阈值（TDP）。这是一个重要的考虑因素，因为HPC环境中的加速器通常需要彼此同步。特斯拉GPU增强的可选确定性方面允许系统管理员确定最佳时钟速度并将其锁定在所有GPU中。</p>
<p>对于需要额外性能和确定性的应用，可以将最新的Tesla GPU设置为同步升压组内的自动升压。启用组启用自动增强功能后，每组GPU将在净空允许时提高时钟速度。该小组将保持时钟彼此同步，以确保整个组的匹配性能。可以在NVIDIA DCGM工具中设置组。</p>
<p><a href="https://www.microway.com/knowledge-center-articles/comparison-of-nvidia-geforce-gpus-and-nvidia-tesla-gpus/" target="_blank" rel="noopener" class="uri">https://www.microway.com/knowledge-center-articles/comparison-of-nvidia-geforce-gpus-and-nvidia-tesla-gpus/</a></p>
]]></content>
      <categories>
        <category>GPU</category>
      </categories>
  </entry>
  <entry>
    <title>cesium-offline</title>
    <url>/2020/03/22/cesium-offline/</url>
    <content><![CDATA[<h3 id="数据源">数据源</h3>
<ol type="1">
<li>卫星影像纹理。使用sxearth等软件以tms格式从已有的网络地图服务商下载存储。</li>
<li>DEM数据。网络公开可下载全球数据有：SRTMV4.1、AW3D30、TanDEM-X等。 <a id="more"></a></li>
</ol>
<h3 id="dem数据预处理">DEM数据预处理</h3>
<p>Cesium支持两种格式的地形：一种是quantized-mesh格式的数据，另一种是基于heightmap的DEM。获得的DEM数据源一般为tiff格式，需要进行转换才能由Cesium处理。可用的转换工具有cesiumlab和cesium-terrain-builder，ctb工具可以处理heightmap格式数据，其更新版本<a href="https://github.com/ahuarte47/cesium-terrain-builder/tree/master-quantized-mesh" target="_blank" rel="noopener">ctb-qmesh</a>可以处理quantized-mesh格式数据。</p>
<ol type="1">
<li>ctb工具的编译。</li>
<li>使用GIS工具软件（GDAL、QGIS、arcMap等）把下载的tiff格式地形文件中的坐标转为WGS84，再将文件中采样中高程数据的nodata异常值使用0或者插值等进行填充。</li>
<li>运行ctb-tile.exe将下载的tiff格式地形文件生成为.terrain瓦片文件。</li>
<li>运行ctb-tile，添加参数-l生成供cesium使用的地图元数据LAYER.JSON。</li>
</ol>
<h3 id="cesium配置">cesium配置</h3>
<ol type="1">
<li>下载解压cesium，如果使用node提供服务，可直接运行根目录的server.js文件。若使用其他web服务器如nginx，则将解压目录中的build/cesium文件夹复制到nginx根目录，配置nginx.conf文件，添加以下内容: <figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">   <span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>	<span class="number">8001</span>;</span><br><span class="line"><span class="attribute">server_name</span>	localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Custom headers and headers various browsers *should* be OK with but aren't</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Tell client that this pre-flight info is valid for 20 days</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="number">1728000</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Content-Type'</span> <span class="string">'text/plain; charset=utf-8'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Content-Length'</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'POST'</span>) &#123;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'GET'</span>) &#123;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">	<span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">	<span class="attribute">root</span>	F:/nginxhtml;</span><br><span class="line">	<span class="attribute">index</span>	index.html index.htm;</span><br><span class="line">   	&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> 其中条件语句目的是为了解决cors资源共享问题。</li>
<li>将影像及处理好的地形文件复制到nginx根目录，编辑cesium示例中的helloworld.html文件，添加如下内容： <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cesium.Ion.defaultAccessToken = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> xaterrain = <span class="keyword">new</span> Cesium.CesiumTerrainProvider(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:8001/ql-terrain'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> tms = Cesium.createTileMapServiceImageryProvider(&#123;</span><br><span class="line">  url: <span class="string">'http://localhost:8001/ql-google-sat'</span>,</span><br><span class="line">  fileExtension: <span class="string">'jpg'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>, &#123;</span><br><span class="line">  geocoder: <span class="literal">false</span>,</span><br><span class="line">  sceneModePicker: <span class="literal">false</span>,</span><br><span class="line">  navigationHelpButton: <span class="literal">false</span>,</span><br><span class="line">  homeButton: <span class="literal">false</span>,</span><br><span class="line">  timeline: <span class="literal">false</span>,</span><br><span class="line">  animation: <span class="literal">false</span>,</span><br><span class="line">  baseLayerPicker: <span class="literal">false</span>,</span><br><span class="line">  fullscreenButton: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//imageryProvider:false,</span></span><br><span class="line">  terrainProvider: xaterrain,</span><br><span class="line">  imageryProvider: tms</span><br><span class="line">&#125;);</span><br><span class="line">viewer.scene.globe.enableLighting = <span class="literal">true</span>;</span><br><span class="line">viewer.scene.debugShowFramesPerSecond = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="参考">参考</h3>
<ol type="1">
<li><a href="https://bertt.wordpress.com/2018/11/26/visualizing-terrains-with-cesium-ii/" target="_blank" rel="noopener">visualizing-terrains-with-cesium-ii</a></li>
<li><a href="https://www.linkedin.com/pulse/fast-cesium-terrain-rendering-new-quantized-mesh-output-alvaro-huarte/" target="_blank" rel="noopener">fast-cesium-terrain-rendering-new-quantized-mesh-output-alvaro-huarte</a></li>
</ol>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>ctb</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>terrain-data-scheduling-for-visualization</title>
    <url>/2020/03/22/terrain-data-scheduling-for-visualization/</url>
    <content><![CDATA[<p>地形四叉树瓦片金字塔数据的调度编程实现上有两种方式，一是建立一个四叉树数据结构，保存瓦片上下层之间的拓扑关系，在一个节点中保存父节点和四个子节点的指针，另一种是用散列映射(hash_map)数据结构，其中瓦片的索引作为键，瓦片的智能指针作为值。四叉树数据结构在调入一个瓦片时必须先生成其父瓦片指针，在删除一个瓦片时必须先删除其所有子瓦片指针，不利于LRU算法的有效实施，而散列映射数据结构则要灵活得多。算法流程图如下所示。 <img src="https://user-images.githubusercontent.com/5879962/47149930-94d4b580-d307-11e8-9acd-5c796495e57a.JPG" alt="data scheduling" /></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>tile</tag>
        <tag>quadtree</tag>
      </tags>
  </entry>
  <entry>
    <title>visual-studio-shortcut</title>
    <url>/2020/03/21/visual-studio-shortcut/</url>
    <content><![CDATA[<p>vs许多快捷键可用于office软件</p>
<h2 id="代码提示">代码提示</h2>
<p><kbd>Ctrl + J</kbd>激活VS默认代码提示功能。</p>
<h2 id="导入命名空间">导入命名空间</h2>
<p><kbd>Ctrl + .</kbd>方便，复杂点的是<kbd>Alt + Shift + F10</kbd>。 <a id="more"></a> ## 代码选择 ### 区域代码选择 按<kbd>Shift</kbd>选择整（行）块代码，可配合四个方向键（左右键：选择单个字符，上下键：上下行的当前列）、<kbd>Home</kbd>（当前行首）、<kbd>End</kbd>（当前行尾）、<kbd>PgUp</kbd>（当前页首）和<kbd>PgDn</kbd>（当前页尾）使用。</p>
<h3 id="单词逐词选择">单词（逐词）选择</h3>
<p><kbd>Ctrl + Shift +</kbd> 方向键（左键、右键）可一次选择整个单词。</p>
<h2 id="代码删除">代码删除</h2>
<ol type="1">
<li><kbd>Ctrl + Delete</kbd>键，删除光标右边的块（整个单词或一个标点）。</li>
<li><kbd>Ctrl + L</kbd>，删除当前行。</li>
</ol>
<h2 id="滚屏">滚屏</h2>
<p><kbd>Ctrl +</kbd> 方向键上或下，让vs的代码窗口向上或向下翻一行。需要翻的行数过多时，用<kbd>PgUp</kbd>或<kbd>PgDn</kbd>。要回到文档开关<kbd>Ctrl + Home</kbd>，文档结尾<kbd>Ctrl + End</kbd>。</p>
<h2 id="方法函数体折叠">方法（函数）体折叠</h2>
<ul>
<li><kbd>Ctrl + M</kbd>两次</li>
<li><kbd>Ctrl + M + O</kbd>折叠光标所在的类的所有方法体，包括Region等等。</li>
<li><kbd>Ctrl + M + L</kbd>折叠当前类文件中所有的类。</li>
</ul>
<h2 id="代码片段搜索">代码片段搜索</h2>
<p><kbd>Alt + A</kbd>快捷键呼出Bing Code Search(需安装Bing Code Search for C#插件)，<kbd>Ctrl + J</kbd>激活代码提示时也会出现必应代码搜索功能。遇到新API时，有参考代码，无疑比光看MSDN更利于搬砖。</p>
<h2 id="代码窗口管理">代码窗口管理</h2>
<p><kbd>Alt + -</kbd> 激活当前代码窗口的菜单</p>
<h2 id="注释">注释</h2>
<ol type="1">
<li>三个<kbd>/</kbd></li>
<li><kbd>Ctrl + K</kbd>、<kbd>Ctrl + C</kbd>注释，<kbd>Ctrl + K</kbd>、<kbd>Ctrl + U</kbd>反注释。</li>
</ol>
<h2 id="切换代码窗口">切换代码窗口</h2>
<p>使用<kbd>Ctrl + Tab</kbd>激活该窗口后，按住<kbd>Ctrl</kbd>键不放，使用<kbd>Tab</kbd>或<kbd>Shift + Tab</kbd>或方向键可进行导航。 ## 跳转到指定行 和word一样的用法，<kbd>Ctrl + G</kbd>。 ## 代码阅读导航 看代码时经常会跳转到不同的类文件中，有时想按跳转的顺序一步步返回，可以按<kbd>Ctrl + -</kbd>，完成后退操作，<kbd>Ctrl + Shift + -</kbd>前进。</p>
]]></content>
      <categories>
        <category>software</category>
        <category>visual studio</category>
      </categories>
      <tags>
        <tag>visual studio</tag>
      </tags>
  </entry>
  <entry>
    <title>pandoc-setting</title>
    <url>/2020/03/20/pandoc-setting/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<p>Windows 10系统中，需要首先从官网下载msi文件进行安装</p>
<h2 id="hexo设置">hexo设置</h2>
<h3 id="更换渲染引擎">更换渲染引擎</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="next主题配置">Next主题配置</h3>
<p>在Next主题的配置文件 _config.yml中设置mathjax为true： <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure> mathjax 和 katex 是互斥的两个选项，enable 不能同时 true或 false。</p>
<h3 id="文章配置">文章配置</h3>
<p>在每篇博文开头之处，添加 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>mathjax</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>quaternion</title>
    <url>/2020/03/19/quaternion/</url>
    <content><![CDATA[<h2 id="复数">复数</h2>
<p>欧拉公式： <span class="math display">\[\begin{equation}
\begin{aligned}
z&amp;=x+y\\&amp;=rcos{\theta}+rsin{\theta}i\\&amp;=re^{i{\theta}}
\end{aligned}
\end{equation}\]</span> 单位复数乘法可以达到一个二维旋转的效果。 <a id="more"></a></p>
<h2 id="四元数">四元数</h2>
<h3 id="四元数的定义">四元数的定义</h3>
<p>从复数推导四元数： <span class="math display">\[\begin{equation}
\begin{aligned}
e^{\textbf{i}\cdot\hat{\textbf{n}}\frac{\theta}{2}}&amp;=cos{\frac{\theta}{2}}+\textbf{i}\cdot\hat{\textbf{n}}sin{\frac{\theta}{2}}\\
&amp;=q_w+\textbf{i}\cdot\textbf{q}_v\\
&amp;=q_w+q_xi+q_yj+q_zk
\end{aligned}
\end{equation}\]</span> 将复数的一个虚部换成三个虚部，<span class="math inline">\(\textbf{i} = (i,j,k)\)</span>，且两两相交。<span class="math inline">\(\hat{\textbf{n}}\)</span>为三维的单位向量，这便是四元数的常规表达形式,定义为： <span class="math display">\[\textbf{q}=q_w+q_xi+q_yj+q_zk\]</span>一个四元数有一个实部和三个虚部，三个虚部之间满足如下关系。 <span class="math display">\[\left\{\begin{matrix}
i^{2}=j^{2}=k^{2}=-1\\
ij=-ji=k\\
jk=-kj=i\\
ki=-ik=j
\end{matrix}\right.\]</span> 或者也用一个标量和一个向量来表达四元数： <span class="math display">\[\mathbf{q} = \left[ q_w, \mathbf{q}_v \right], \quad q_w \in \mathbb{R}, \mathbf{q}_v = [q_x, q_y, q_z] \in \mathbb{R}^3.\]</span> 这里，标量<span class="math inline">\(\mathbf{q}_w\)</span>称为四元数的实部，而向量<span class="math inline">\(\mathbf{q}_v\)</span>称为它的虚部。如果一个四元数虚部为0，称之为实四元数。反之，若它的实部为0，称之为虚四元数(纯四元数)，是四维空间在<span class="math inline">\(q_w=0\)</span>时的一个子空间的点，形式为<span class="math inline">\(\{0, \textbf{q}_v\}\)</span>。该定义和复数是相似的。</p>
<h3 id="四元数的理解">四元数的理解</h3>
<h4 id="矩阵及旋转">矩阵及旋转</h4>
<p>矩阵表示的是一个空间向另一个空间转换的变换关系。三维空间的旋转变换由旋转后的空间在世界空间的三个基来表示。假如某个点绕Z轴旋转α角，也就是说旋转后的Z坐标是不变的，变化的只是X、Y坐标，可以写出下面这个式子： <span class="math display">\[\begin{pmatrix}
x^{&#39;}\\ 
y^{&#39;}\\
z
\end{pmatrix}=\begin{pmatrix}
cos\alpha &amp; -sin\alpha &amp; 0\\ 
sin\alpha &amp; cos\alpha &amp; 0\\
0 &amp; 0 &amp; 1
\end{pmatrix}\begin{pmatrix}
x\\ 
y\\
z
\end{pmatrix}\]</span> 这个式子中的系数矩阵可以记为如下形式: <span class="math display">\[R_{Z}(\alpha)=\begin{pmatrix}
cos\alpha &amp; -sin\alpha &amp; 0\\ 
sin\alpha &amp; cos\alpha &amp; 0\\
0 &amp; 0 &amp; 1
\end{pmatrix}\]</span> 将<span class="math inline">\(R_Z\)</span>称为旋转矩阵。同样可推出：</p>
<p><span class="math display">\[\begin{matrix}
R_{X}(\alpha)=\begin{pmatrix}
1 &amp; 0 &amp; 0\\
0 &amp; cos\alpha &amp; -sin\alpha\\
0 &amp; sin\alpha &amp; cos\alpha
\end{pmatrix}\\
R_{Y}(\alpha)=\begin{pmatrix}
cos\alpha &amp; 0 &amp; sin\alpha\\
0 &amp; 1 &amp; 0\\
-sin\alpha &amp; 0 &amp; cos\alpha
\end{pmatrix}\end{matrix}\]</span> 矩阵旋转使用了一个4*4大小的矩阵来表示绕任意轴旋转的变换矩阵，而欧拉选择则是按照一定的坐标轴顺序（例如先x、再y、最后z），每个轴旋转一定角度来变换坐标或向量，它实际上是一系列坐标轴旋转的组合，比如： <span class="math display">\[R = R_{Z}(\alpha)R_{Y}(\beta)R_{X}(\gamma)=\begin{pmatrix}
cos\alpha cos\beta &amp; cos\alpha sin\beta sin\gamma - sin\alpha cos\gamma &amp; cos\alpha sin\beta cos\gamma + sin\alpha sin\gamma\\ 
sin\alpha cos\beta &amp; cos\alpha cos\gamma + sin\alpha sin\beta sin\gamma &amp; sin\alpha sin\beta cos\gamma - sin\gamma cos\alpha\\ 
-sin\beta &amp; cos\beta sin\gamma &amp; cos\beta cos\gamma
\end{pmatrix}\]</span></p>
<p>OpenGL中如果已经通过鼠标或者键盘得到了 yaw、pitch 和 roll 的值，就可以通过类似下面的方法计算得到 view 矩阵。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">glm::mat4 <span class="title">CalculateView</span><span class="params">(<span class="keyword">float</span> yaw, <span class="keyword">float</span> pitch, <span class="keyword">float</span> roll, glm::vec3 eye_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> glm::mat4 matRoll  = glm::rotate(matRoll,  roll,  glm::vec3(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>));</span><br><span class="line"> glm::mat4 matPitch = glm::rotate(matPitch, pitch, glm::vec3(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>));</span><br><span class="line"> glm::mat4 matYaw   = glm::rotate(matYaw,  yaw,    glm::vec3(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>));</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 顺序是非常重要的</span></span><br><span class="line"> glm::mat4 rotate =  matYaw * mattRoll * matPitch;</span><br><span class="line"></span><br><span class="line"> glm::mat4 translate = glm::translate(translate, -eye_pos);</span><br><span class="line"></span><br><span class="line"> viewMatrix = rotate * translate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>旋转到一定程度，某一个轴可以被其他两个轴线性表示，那么就缺失了一个维度，产生了万向节死锁。只要使用矩阵来表示旋转，就有发生万向节死锁的风险。</p>
<h4 id="用四元数表示旋转">用四元数表示旋转</h4>
<p>一个四元数可以和一个矩阵旋转对应。使用四元数来表示旋转有多方面的原因：</p>
<ul>
<li>解决万向节死锁问题</li>
<li>更少的存储空间（4 floats vs 16 floats）</li>
<li>绕任意轴旋转非常方便，而旋转矩阵实现非常复杂</li>
<li>方便追踪旋转</li>
<li>旋转结合时计算量较少，无论是求逆、串联等操作，相比矩阵更加高效</li>
<li>方便平滑插值，而旋转矩阵的实现方法不能保证绝对平滑</li>
</ul>
<p>还有一种说法是解决向量乘法，向量之间乘法有内积和外积，但这两个运算均不完美，即不满足群的条件（当然四元数诞生的时候也还没有内积外积的说法）。那向量之间是否存在这样一个非常完美的乘法，于是三维空间无法解决的问题就映射到四维空间。这便是四元数诞生的契机。四元数并不是生来为了解决三维旋转，而是它的性质非常有利于表达旋转信息。</p>
<p>基础概念：</p>
<p><strong>空间和子空间的映射</strong> 我们将二维空间表示为(x,y)，当y=0时，其实可以看成是一维的，只不过它表示成(x,0)这种形式。推到四维，(w,x,y,z)，当w=0时，(0,x,y,z)就是一个三维子空间，这也是为什么我们可以用单位四元数对三维向量进行操作，其实我们是将三维向量映射到四维的三维子空间（w=0，这种形式也称纯四元数），然后对其进行旋转，最终得到的向量结果依然是这个三维子空间中的，因而可以映射回三维空间。</p>
<p><strong>广义球</strong> 这里的球是广义上的。我们在二维平面上，广义球其实指代circle，三维空间上就是我们认知上的球，称为two-sphere，而四维空间中广义球其实是一个超球（hyper-sphere），又称为three-sphere。单位向量其实就是广义球上面的点，而单位四元数也就是three-sphere上面的点。</p>
<p><strong>约束与特征向量</strong> 空间中的一点由x, y, z等参数来表示，一般来说参数的数量与维数相等，二维空间的点用{x, y}参数，四维空间的点用{x, y, z, w}参数。但是对于空间的点加以约束，则会减少参数的数量，比如三维空间的点在某一单位球面上，原本三个参数{x, y, z}才能表达的点现在只需要两个参数{u, v}就可以表达。如果{u, v}是单位向量，也可以称{u, v}是{x, y, z}的特征向量。</p>
<p><strong>空间映射理解</strong> <span class="math inline">\(x^{2}+y^{2}+z^{2}+w^{2}=1\)</span>中取x、y和z来表示超球。四维空间投影到三维超平面（w=0）可能是一个two-sphere。当投影点在整个two-sphere的边缘时，w一定为0，值得一提的是在这个空间内的四元数是一个纯四元数。当投影点落在two-sphere的内部时，也分为两种情况，w&gt;0和w&lt;0。但是可以发现这两种情况下对应的特征向量是一样的，所以将旋转矩阵向四元数转换时，是有两个对应值的，四元数的范围是2倍覆盖于3D旋转（2:1 mapping）。</p>
<p>四元数作为四维空间中一个超球上面的点，主要用于描述3D旋转。在复数域<span class="math inline">\(\mathbb{C}\)</span>，可以用一个复数<span class="math inline">\(e^{i\theta}\)</span>表示2D的旋转，类似的，3D空间也可以用单位四元数表示旋转。假设某个旋转是绕单位向量<span class="math inline">\(\mathbf{\hat{n}}=[n_x,n_y,n_z]^T\)</span>进行了角度为θ的旋转，那么这个旋转的四元数形式为： <span class="math display">\[\begin{equation}
\mathbf{q} = \left[\cos\frac{\theta}{2},n_x\sin\frac{\theta}{2}, n_y\sin\frac{\theta}{2}, n_z\sin\frac{\theta}{2}\right]^T
\end{equation}\]</span> 这是一个模长为1的单位四元数，实部是<span class="math inline">\(cos\frac{θ}{2}\)</span>，虚部有3个，两两互相正交，为一个单位轴乘以<span class="math inline">\(sin\frac{θ}{2}\)</span>。若四元数长度不为1，可以通过归一化转换为模长为1的四元数。式中的θ加上2π，得到一个相同的旋转，但此时对应的四元数变成了−q。因此在四元数中，任意的旋转都可以由两个互为相反数的四元数表示。同理，取θ为0，则得到一个没有任何旋转的四元数：<span class="math inline">\(\begin{equation}\mathbf{q}_0=\left[{\pm1,0,0,0}\right]^T\end{equation}\)</span>。 齐次形式<span class="math inline">\((w,x,y,z)\)</span>的四元数满足<span class="math inline">\(x^{2}+y^{2}+z^{2}+w^{2}=1\)</span>，有 <span class="math display">\[\left\{\begin{matrix}
x = n_{x}sin\frac{\theta}{2}\\
y = n_{y}sin\frac{\theta}{2}\\
z = n_{z}sin\frac{\theta}{2}\\
w = cos\frac{\theta}{2}
\end{matrix}\right.\]</span> 由于存在<span class="math inline">\(x^{2}+y^{2}+z^{2}+w^{2}=1\)</span>这个约束，四元数的自由度其实只有3，且每个四元数可以对应一个特征向量，即<span class="math inline">\(\hat{\textbf{n}}\)</span>。四元数并不是与特征向量一一对应的。 假设有一个空间三维点<span class="math inline">\(\mathbf{v} = [x,y,z]\in \mathbb{R}^3\)</span>，以及一个由旋转轴和夹角<span class="math inline">\(\mathbf{n},\theta\)</span> 指定的旋转。用一个虚四元数来描述该空间三维点：<span class="math inline">\(\mathbf{p} = [0, x, y, z] = [0, \mathbf{v}]\)</span>。然后用另一个四元数表示这个旋转：<span class="math inline">\(\mathbf{q}=[\cos \frac{\theta}{2}, \mathbf{n} \sin \frac{\theta}{2} ]\)</span>，那么旋转后的点<span class="math inline">\(\mathbf{p}&#39;\)</span>即可表示为这样的乘积： <span class="math display">\[\begin{equation} \mathbf{p}&#39; = \mathbf{q} \mathbf{p} \mathbf{q}^{-1} \end{equation}\]</span> 可以验证，计算结果的实部为<span class="math inline">\(\mathbf{n}^T(\mathbf{n} \times \mathbf{v})=0\)</span>，故计算结果为纯虚四元数。其虚部的三个分量表示旋转后3D点的坐标。</p>
<h3 id="四元数的运算">四元数的运算</h3>
<p>四元数和通常复数一样，可以进行一系列的运算。常见的有四则运算、内积、求逆、共轭、求指数／对数等等。表示姿态时，它还可以进行插值。 现有两个四元数<span class="math inline">\(\mathbf{q}_a,\mathbf{q}_b\)</span>，它们的向量表示为<span class="math inline">\([s_a, \mathbf{v}_a], [s_b, \mathbf{v}_b]\)</span>，或者原始四元数表示为<span class="math inline">\(s_a+x_ai+y_aj+z_ak, s_b+x_bi+y_bj+z_bk.\)</span>，则有：</p>
<ul>
<li>加减法 <span class="math display">\[\begin{equation} \mathbf{q}_a \pm \mathbf{q}_b = \left[ s_a \pm s_b, \mathbf{v}_a \pm \mathbf{v}_b \right]\end{equation}\]</span></li>
<li>乘法
$$\begin{equation} \begin{array}{lll} \mathbf{q}_a \mathbf{q}_b &=&  {s_a}{s_b} - {x_a}{x_b} - {y_a}{y_b} - {z_a}{z_b}\\   &&+ \left( {{s_a}{x_b} + {x_a}{s_b} + {y_a}{z_b} - {z_a}{y_b}} \right)i\\   &&+ \left( {{s_a}{y_b} - {x_a}{z_b} + {y_a}{s_b} + {z_a}{b_b}} \right)j\\   &&+ \left( {{s_a}{z_b} + {x_a}{y_b} - {x_b}{y_a} + {z_a}{s_b}} \right)k  \end{array} \end{equation}$$ 写成向量形式并利用内外积运算表达： <span class="math display">\[\begin{equation} \mathbf{q}_a \mathbf{q}_b = \left[ s_a s_b - \mathbf{v}_a \cdot \mathbf{v}_b, s_a\mathbf{v}_b + s_b\mathbf{v}_a + \mathbf{v}_a \times \mathbf{v}_b \right] \end{equation}\]</span> 在该乘法定义下，两个实的四元数乘积仍是实的，这与复数也是一致的。然而，注意到，由于最后一项外积的存在，该乘法通常是不可交换的，除非<span class="math inline">\(\mathbf{v}_a\)</span>和<span class="math inline">\(\mathbf{v}_b\)</span>在<span class="math inline">\(\mathbb{R}^3\)</span>中共线。</li>
<li>模长 四元数的模长定义为： <span class="math display">\[\begin{equation}  \| \mathbf{q}_a \| = \sqrt{ s_a^2 + x_a^2 + y_a^2 + z_a^2 } = \sqrt{\mathbf{q}_a^{*T} \mathbf{q}_a} \end{equation}\]</span> 可以验证，两个四元数乘积的模即为模的乘积。这保证单位四元数相乘后仍是单位四元数。 <span class="math display">\[\begin{equation}  \| \mathbf{q}_a \mathbf{q}_b \| = \|\mathbf{q}_a \| \| \mathbf{q}_b \| \end{equation}\]</span></li>
<li>逆 <span class="math display">\[\begin{equation} \mathbf{q}^{-1} = \mathbf{q}^* / \| \mathbf{q} \| ^2 \end{equation}\]</span> 按此定义，四元数和自己的逆的乘积为实四元数的1： <span class="math display">\[\begin{equation} \mathbf{q} \mathbf{q}^{-1} = \mathbf{q}^{-1} \mathbf{q} = 1 \end{equation}\]</span> 同时，乘积的逆有和矩阵相似的性质： <span class="math display">\[\begin{equation}  \left( \mathbf{q}_a \mathbf{q}_b \right)^{-1} = \mathbf{q}_b^{-1} \mathbf{q}_a^{-1} \end{equation}\]</span> 对于单位四元数，即<span class="math inline">\(\|\mathbf{q}\|=1\)</span>，它的逆即是它的共轭四元数。</li>
<li>数乘与点乘 和向量相似，四元数可以与数相乘： <span class="math display">\[\begin{equation}  k \mathbf{q} = \left[ ks, k\mathbf{v} \right] \end{equation}\]</span> 点乘是指两个四元数每个位置上的数值分别相乘： <span class="math display">\[\begin{equation} \mathbf{q}_a \cdot \mathbf{q}_b = s_a s_b + x_a x_b i + y_a y_b j + z_a z_b k \end{equation}\]</span></li>
</ul>
<h3 id="四元数到旋转矩阵的转换">四元数到旋转矩阵的转换</h3>
<p>由于任意单位四元数都可表示为一个3D旋转，即SO(3)中的元素，我们可以找到一个旋转矩阵与之对应。最简单的方式是由四元数q解出旋转角θ和旋转轴n，但那样要计算一个arccos函数，代价较大。实际上这个计算是可以通过一定的计算技巧绕过的。为省略篇幅，我们直接给出四元数到旋转矩阵的转换方式。 <span class="math display">\[\begin{equation} \mathbf{R} = \left[ {\begin{array}{*{20}{c}} {1 - 2q_2^2 - 2q_3^2}&amp;{2{q_1}{q_2} + 2{q_0}{q_3}}&amp;{2{q_1}{q_3} - 2{q_0}{q_2}}\\ {2{q_1}{q_2} - 2{q_0}{q_3}}&amp;{1 - 2q_1^2 - 2q_3^2}&amp;{2{q_2}{q_3} + 2{q_0}{q_1}}\\ {2{q_1}{q_3} + 2{q_0}{q_2}}&amp;{2{q_2}{q_3} - 2{q_0}{q_1}}&amp;{1 - 2q_1^2 - 2q_2^2} \end{array}} \right] \end{equation}\]</span> 反之，由旋转矩阵到四元数的转换如下。假设矩阵为<span class="math inline">\(\mathbf{R}=\{ m_{ij}\}, i, j \in \left[ 1, 2,3 \right]\)</span>，其对应的四元数q由下式给出： $$\begin{equation} {q_0} = \frac{{\sqrt {tr(R) + 1} }}{2},{q_1} = \frac{{{m_{23}} - {m_{32}}}}{{4{q_0}}},{q_2} = \frac{{{m_{31}} - {m_{13}}}}{{4{q_0}}},{q_3} = \frac{{{m_{12}} - {m_{21}}}}{{4{q_0}}} \end{equation}$$ 其中tr(R)表示R矩阵的迹，也即矩阵R的主对角线（从左上方至右下方的对角线）上各个元素的总和。由于q和−q表示同一个旋转，事实上一个R的四元数表示并不是惟一的。存在其他三种与上式类似的计算方式，而本书省略了。实际编程中，当q0接近0时，其余三个分量会非常大，导致解不稳定，此时会考虑使用剩下的几种方式计算。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/gaoxiang12/p/5120175.html" target="_blank" rel="noopener">视觉SLAM中的数学基础 第二篇 四元数</a></li>
<li><a href="http://www.selfgleam.com/quaternion-camera.html" target="_blank" rel="noopener">四元数相机</a></li>
<li><a href="http://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html" target="_blank" rel="noopener">欧拉角、四元数、旋转矩阵推导及相互关系</a></li>
<li><a href="https://krasjet.github.io/quaternion/quaternion.pdf" target="_blank" rel="noopener">四元数与三维旋转</a></li>
<li><a href="https://eater.net/quaternions" target="_blank" rel="noopener">Visualizing quaternions</a></li>
</ul>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>四元数</tag>
      </tags>
  </entry>
  <entry>
    <title>epsg-4326-vs-3857</title>
    <url>/2020/03/19/epsg-4326-vs-3857/</url>
    <content><![CDATA[<h2 id="基准">基准</h2>
<p>每种地图和空间数据集都有一个大地基准，而且在地球的不同地方使用着不同的基准。基准是基于特定椭球体的地理坐标系，原点位于特定位置。NOAA的<a href="https://www.ngs.noaa.gov/corbin/class_description/NGS_Datums_vid1/" target="_blank" rel="noopener">视频</a>中较好的介绍了基准的概念。 <a id="more"></a></p>
<h2 id="epsg-4326">EPSG 4326</h2>
<p>即WGS84，由GeoJSON定义，以经纬度表示。无法在二维平面地图上可视化WGS84坐标系，大多数软件程序使用等角投影（Plate-Carrée）投影这些坐标（Esri使用EPSG：54001）。</p>
<h2 id="epsg-3857">EPSG 3857</h2>
<p>采用WGS84坐标系并将其投影到正方形上。在大多数情况下，网络地图依赖于以WGS84坐标存储的数据（在某些程序中称为“非投影”数据），然后使用Pseudo-Mercator可视化数据。 如上所述，WGS84是未投影的，该数据没有可视化表示。 因此如果说要在WGS84中查看其数据，则实际上是希望在Plate-Carrée投影中查看其数据，该投影实际上在页面创建了线性笛卡尔图。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://lyzidiamond.com/posts/4326-vs-3857" target="_blank" rel="noopener">epsg 4326 vs 3857(projection etc)</a></li>
</ul>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>epsg</tag>
        <tag>datum</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-git-deploy</title>
    <url>/2020/03/18/hexo-git-deploy/</url>
    <content><![CDATA[<h2 id="git-hook方式">git hook方式</h2>
<h3 id="本地">本地</h3>
<p>本地部署工具</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>在hexo站点配置文件_config.yml中添加deploy参数： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- type: git</span><br><span class="line">  repo: git@vps-ip:&#x2F;home&#x2F;git&#x2F;hexo.git</span><br></pre></td></tr></table></figure> <a id="more"></a></p>
<h3 id="服务端">服务端</h3>
<p>服务端添加用户</p>
<p><code>adduser git</code></p>
<p>设置用户权限，在/etc/sudoers中增加如下内容： <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">git   ALL=(ALL)     ALL //添加一行git用户权限</span><br></pre></td></tr></table></figure> 同时增加git用户对相关文件夹的读写权限： <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown git:git -R /home/git</span><br><span class="line">chown git:git -R /var/www/html</span><br></pre></td></tr></table></figure> 然后将本地ssh公钥上传，并在服务端建立网页共享git库。 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir /home/git/.ssh &amp;&amp; <span class="built_in">cd</span> /home/git/.ssh</span><br><span class="line">vim authorized_keys</span><br><span class="line">mkdir /home/git/hexo.git</span><br><span class="line"><span class="built_in">cd</span> /home/git/hexo.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure> 接着配置hooks</p>
<p><code>vim hooks/post-receive</code></p>
<p>添加如下内容： <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/html --git-dir=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure> 设置权限</p>
<p><code>chmod +x post-receive</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>cesium-ctb-terrain-gen</title>
    <url>/2020/03/18/cesium-ctb-terrain-gen/</url>
    <content><![CDATA[<h2 id="下载tif">下载tif</h2>
<h3 id="可用网站">可用网站</h3>
<ul>
<li><a href="https://worlddem-database.terrasar.com/" target="_blank" rel="noopener">AIRBUS worldDEM-terrasar</a></li>
<li><a href="http://dwtkns.com/srtm30m/" target="_blank" rel="noopener">srtm30m</a></li>
<li><a href="http://dwtkns.com/srtm/" target="_blank" rel="noopener">srtm90m</a></li>
<li><a href="https://scihub.copernicus.eu/dhus/#/home" target="_blank" rel="noopener">ESA哥白尼计划</a></li>
<li><a href="https://earthexplorer.usgs.gov/" target="_blank" rel="noopener">USGS-earthexplorer</a></li>
<li><a href="https://prd-tnm.s3.amazonaws.com/index.html?prefix=StagedProducts/Elevation/1m/IMG/" target="_blank" rel="noopener">USGS-NED-1m-db in USA</a></li>
<li><a href="https://viewer.nationalmap.gov/basic/?basemap=b1&amp;category=ned,nedsrc&amp;title=3DEP%20View" target="_blank" rel="noopener">USGS-nationalmap-3DEP</a></li>
<li><a href="https://eos.com/landviewer/?lat=34.26368&amp;lng=109.19109&amp;z=11" target="_blank" rel="noopener">earth observing system-landviewer</a></li>
<li><a href="https://search.asf.alaska.edu" target="_blank" rel="noopener">NASA阿拉斯加卫星设施</a></li>
<li><a href="https://nsidc.org/data/highmountainasia/data-summaries" target="_blank" rel="noopener">NASA青藏高原8m</a></li>
<li><a href="https://www.eorc.jaxa.jp/ALOS/en/aw3d30/index.htm" target="_blank" rel="noopener">AW3D30</a></li>
<li><a href="http://freegisdata.rtwilson.com/" target="_blank" rel="noopener">others</a> <a id="more"></a></li>
</ul>
<h2 id="处理tif">处理tif</h2>
<p>使用ArcMap QGIS等工具，合成tif瓦片，设置pixeltype数据类型float为int，再设置nodata值为0。</p>
<h2 id="生成terrain">生成terrain</h2>
<h3 id="ctb下载编译">ctb下载编译</h3>
<h3 id="使用ctb生成terrain文件">使用ctb生成terrain文件</h3>
<p>注：生成时间长，数据量大。</p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>ctb</tag>
        <tag>terrain</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="use-next-theme">Use next theme</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>in _config.yml, set <code>theme: next</code>.</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
