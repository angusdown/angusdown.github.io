<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>visual-studio-shortcut</title>
    <url>/2020/03/21/visual-studio-shortcut/</url>
    <content><![CDATA[<p>vs许多快捷键可用于office软件</p>
<h2 id="代码提示">代码提示</h2>
<p><kbd>Ctrl + J</kbd>激活VS默认代码提示功能。</p>
<h2 id="导入命名空间">导入命名空间</h2>
<p><kbd>Ctrl + .</kbd>方便，复杂点的是<kbd>Alt + Shift + F10</kbd>。 <a id="more"></a> ## 代码选择 ### 区域代码选择 按<kbd>Shift</kbd>选择整（行）块代码，可配合四个方向键（左右键：选择单个字符，上下键：上下行的当前列）、<kbd>Home</kbd>（当前行首）、<kbd>End</kbd>（当前行尾）、<kbd>PgUp</kbd>（当前页首）和<kbd>PgDn</kbd>（当前页尾）使用。</p>
<h3 id="单词逐词选择">单词（逐词）选择</h3>
<p><kbd>Ctrl + Shift +</kbd> 方向键（左键、右键）可一次选择整个单词。</p>
<h2 id="代码删除">代码删除</h2>
<ol type="1">
<li><kbd>Ctrl + Delete</kbd>键，删除光标右边的块（整个单词或一个标点）。</li>
<li><kbd>Ctrl + L</kbd>，删除当前行。</li>
</ol>
<h2 id="滚屏">滚屏</h2>
<p><kbd>Ctrl +</kbd> 方向键上或下，让vs的代码窗口向上或向下翻一行。需要翻的行数过多时，用<kbd>PgUp</kbd>或<kbd>PgDn</kbd>。要回到文档开关<kbd>Ctrl + Home</kbd>，文档结尾<kbd>Ctrl + End</kbd>。</p>
<h2 id="方法函数体折叠">方法（函数）体折叠</h2>
<ul>
<li><kbd>Ctrl + M</kbd>两次</li>
<li><kbd>Ctrl + M + O</kbd>折叠光标所在的类的所有方法体，包括Region等等。</li>
<li><kbd>Ctrl + M + L</kbd>折叠当前类文件中所有的类。</li>
</ul>
<h2 id="代码片段搜索">代码片段搜索</h2>
<p><kbd>Alt + A</kbd>快捷键呼出Bing Code Search(需安装Bing Code Search for C#插件)，<kbd>Ctrl + J</kbd>激活代码提示时也会出现必应代码搜索功能。遇到新API时，有参考代码，无疑比光看MSDN更利于搬砖。</p>
<h2 id="代码窗口管理">代码窗口管理</h2>
<p><kbd>Alt + -</kbd> 激活当前代码窗口的菜单</p>
<h2 id="注释">注释</h2>
<ol type="1">
<li>三个<kbd>/</kbd></li>
<li><kbd>Ctrl + K</kbd>、<kbd>Ctrl + C</kbd>注释，<kbd>Ctrl + K</kbd>、<kbd>Ctrl + U</kbd>反注释。</li>
</ol>
<h2 id="切换代码窗口">切换代码窗口</h2>
<p>使用<kbd>Ctrl + Tab</kbd>激活该窗口后，按住<kbd>Ctrl</kbd>键不放，使用<kbd>Tab</kbd>或<kbd>Shift + Tab</kbd>或方向键可进行导航。 ## 跳转到指定行 和word一样的用法，<kbd>Ctrl + G</kbd>。 ## 代码阅读导航 看代码时经常会跳转到不同的类文件中，有时想按跳转的顺序一步步返回，可以按<kbd>Ctrl + -</kbd>，完成后退操作，<kbd>Ctrl + Shift + -</kbd>前进。</p>
]]></content>
      <categories>
        <category>software - visual studio</category>
      </categories>
      <tags>
        <tag>visual studio</tag>
      </tags>
  </entry>
  <entry>
    <title>pandoc-setting</title>
    <url>/2020/03/20/pandoc-setting/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<p>Windows 10系统中，需要首先从官网下载msi文件进行安装</p>
<h2 id="hexo设置">hexo设置</h2>
<h3 id="更换渲染引擎">更换渲染引擎</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="next主题配置">Next主题配置</h3>
<p>在Next主题的配置文件 _config.yml中设置mathjax为true： <figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Math Formulas Render Support</span><br><span class="line">math:</span><br><span class="line">  # Default (true) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in Front-matter.</span><br><span class="line">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # See: https://mhchem.github.io/MathJax-mhchem/</span><br><span class="line">    mhchem: false</span><br><span class="line"></span><br><span class="line">  # hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure> mathjax 和 katex 是互斥的两个选项，enable 不能同时 true或 false。</p>
<h3 id="文章配置">文章配置</h3>
<p>在每篇博文开头之处，添加 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>mathjax</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>quaternion</title>
    <url>/2020/03/19/quaternion/</url>
    <content><![CDATA[<h2 id="复数">复数</h2>
<p>欧拉公式： <span class="math display">\[\begin{equation}
\begin{aligned}
z&amp;=x+y\\&amp;=rcos{\theta}+rsin{\theta}i\\&amp;=re^{i{\theta}}
\end{aligned}
\end{equation}\]</span> 单位复数乘法可以达到一个二维旋转的效果。 <a id="more"></a></p>
<h2 id="四元数">四元数</h2>
<h3 id="四元数的定义">四元数的定义</h3>
<p>从复数推导四元数： <span class="math display">\[\begin{equation}
\begin{aligned}
e^{\textbf{i}\cdot\hat{\textbf{n}}\frac{\theta}{2}}&amp;=cos{\frac{\theta}{2}}+\textbf{i}\cdot\hat{\textbf{n}}sin{\frac{\theta}{2}}\\
&amp;=q_w+\textbf{i}\cdot\textbf{q}_v\\
&amp;=q_w+q_xi+q_yj+q_zk
\end{aligned}
\end{equation}\]</span> 将复数的一个虚部换成三个虚部，<span class="math inline">\(\textbf{i} = (i,j,k)\)</span>，且两两相交。<span class="math inline">\(\hat{\textbf{n}}\)</span>为三维的单位向量，这便是四元数的常规表达形式,定义为： <span class="math display">\[\textbf{q}=q_w+q_xi+q_yj+q_zk\]</span>一个四元数有一个实部和三个虚部，三个虚部之间满足如下关系。 <span class="math display">\[\left\{\begin{matrix}
i^{2}=j^{2}=k^{2}=-1\\
ij=-ji=k\\
jk=-kj=i\\
ki=-ik=j
\end{matrix}\right.\]</span> 或者也用一个标量和一个向量来表达四元数： <span class="math display">\[\mathbf{q} = \left[ q_w, \mathbf{q}_v \right], \quad q_w \in \mathbb{R}, \mathbf{q}_v = [q_x, q_y, q_z] \in \mathbb{R}^3.\]</span> 这里，标量<span class="math inline">\(\mathbf{q}_w\)</span>称为四元数的实部，而向量<span class="math inline">\(\mathbf{q}_v\)</span>称为它的虚部。如果一个四元数虚部为0，称之为实四元数。反之，若它的实部为0，称之为虚四元数(纯四元数)，是四维空间在<span class="math inline">\(q_w=0\)</span>时的一个子空间的点，形式为<span class="math inline">\(\{0, \textbf{q}_v\}\)</span>。该定义和复数是相似的。</p>
<h3 id="四元数的理解">四元数的理解</h3>
<h4 id="矩阵及旋转">矩阵及旋转</h4>
<p>矩阵表示的是一个空间向另一个空间转换的变换关系。三维空间的旋转变换由旋转后的空间在世界空间的三个基来表示。假如某个点绕Z轴旋转α角，也就是说旋转后的Z坐标是不变的，变化的只是X、Y坐标，可以写出下面这个式子： <span class="math display">\[\begin{pmatrix}
x^{&#39;}\\ 
y^{&#39;}\\
z
\end{pmatrix}=\begin{pmatrix}
cos\alpha &amp; -sin\alpha &amp; 0\\ 
sin\alpha &amp; cos\alpha &amp; 0\\
0 &amp; 0 &amp; 1
\end{pmatrix}\begin{pmatrix}
x\\ 
y\\
z
\end{pmatrix}\]</span> 这个式子中的系数矩阵可以记为如下形式: <span class="math display">\[R_{Z}(\alpha)=\begin{pmatrix}
cos\alpha &amp; -sin\alpha &amp; 0\\ 
sin\alpha &amp; cos\alpha &amp; 0\\
0 &amp; 0 &amp; 1
\end{pmatrix}\]</span> 将<span class="math inline">\(R_Z\)</span>称为旋转矩阵。同样可推出：</p>
<p><span class="math display">\[\begin{matrix}
R_{X}(\alpha)=\begin{pmatrix}
1 &amp; 0 &amp; 0\\
0 &amp; cos\alpha &amp; -sin\alpha\\
0 &amp; sin\alpha &amp; cos\alpha
\end{pmatrix}\\
R_{Y}(\alpha)=\begin{pmatrix}
cos\alpha &amp; 0 &amp; sin\alpha\\
0 &amp; 1 &amp; 0\\
-sin\alpha &amp; 0 &amp; cos\alpha
\end{pmatrix}\end{matrix}\]</span> 矩阵旋转使用了一个4*4大小的矩阵来表示绕任意轴旋转的变换矩阵，而欧拉选择则是按照一定的坐标轴顺序（例如先x、再y、最后z），每个轴旋转一定角度来变换坐标或向量，它实际上是一系列坐标轴旋转的组合，比如： <span class="math display">\[R = R_{Z}(\alpha)R_{Y}(\beta)R_{X}(\gamma)=\begin{pmatrix}
cos\alpha cos\beta &amp; cos\alpha sin\beta sin\gamma - sin\alpha cos\gamma &amp; cos\alpha sin\beta cos\gamma + sin\alpha sin\gamma\\ 
sin\alpha cos\beta &amp; cos\alpha cos\gamma + sin\alpha sin\beta sin\gamma &amp; sin\alpha sin\beta cos\gamma - sin\gamma cos\alpha\\ 
-sin\beta &amp; cos\beta sin\gamma &amp; cos\beta cos\gamma
\end{pmatrix}\]</span></p>
<p>OpenGL中如果已经通过鼠标或者键盘得到了 yaw、pitch 和 roll 的值，就可以通过类似下面的方法计算得到 view 矩阵。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">glm::mat4 <span class="title">CalculateView</span><span class="params">(<span class="keyword">float</span> yaw, <span class="keyword">float</span> pitch, <span class="keyword">float</span> roll, glm::vec3 eye_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> glm::mat4 matRoll  = glm::rotate(matRoll,  roll,  glm::vec3(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>));</span><br><span class="line"> glm::mat4 matPitch = glm::rotate(matPitch, pitch, glm::vec3(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>));</span><br><span class="line"> glm::mat4 matYaw   = glm::rotate(matYaw,  yaw,    glm::vec3(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>));</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 顺序是非常重要的</span></span><br><span class="line"> glm::mat4 rotate =  matYaw * mattRoll * matPitch;</span><br><span class="line"></span><br><span class="line"> glm::mat4 translate = glm::translate(translate, -eye_pos);</span><br><span class="line"></span><br><span class="line"> viewMatrix = rotate * translate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>旋转到一定程度，某一个轴可以被其他两个轴线性表示，那么就缺失了一个维度，产生了万向节死锁。只要使用矩阵来表示旋转，就有发生万向节死锁的风险。</p>
<h4 id="用四元数表示旋转">用四元数表示旋转</h4>
<p>一个四元数可以和一个矩阵旋转对应。使用四元数来表示旋转有多方面的原因：</p>
<ul>
<li>解决万向节死锁问题</li>
<li>更少的存储空间（4 floats vs 16 floats）</li>
<li>绕任意轴旋转非常方便，而旋转矩阵实现非常复杂</li>
<li>方便追踪旋转</li>
<li>旋转结合时计算量较少，无论是求逆、串联等操作，相比矩阵更加高效</li>
<li>方便平滑插值，而旋转矩阵的实现方法不能保证绝对平滑</li>
</ul>
<p>还有一种说法是解决向量乘法，向量之间乘法有内积和外积，但这两个运算均不完美，即不满足群的条件（当然四元数诞生的时候也还没有内积外积的说法）。那向量之间是否存在这样一个非常完美的乘法，于是三维空间无法解决的问题就映射到四维空间。这便是四元数诞生的契机。四元数并不是生来为了解决三维旋转，而是它的性质非常有利于表达旋转信息。</p>
<p>基础概念：</p>
<p><strong>空间和子空间的映射</strong> 我们将二维空间表示为(x,y)，当y=0时，其实可以看成是一维的，只不过它表示成(x,0)这种形式。推到四维，(w,x,y,z)，当w=0时，(0,x,y,z)就是一个三维子空间，这也是为什么我们可以用单位四元数对三维向量进行操作，其实我们是将三维向量映射到四维的三维子空间（w=0，这种形式也称纯四元数），然后对其进行旋转，最终得到的向量结果依然是这个三维子空间中的，因而可以映射回三维空间。</p>
<p><strong>广义球</strong> 这里的球是广义上的。我们在二维平面上，广义球其实指代circle，三维空间上就是我们认知上的球，称为two-sphere，而四维空间中广义球其实是一个超球（hyper-sphere），又称为three-sphere。单位向量其实就是广义球上面的点，而单位四元数也就是three-sphere上面的点。</p>
<p><strong>约束与特征向量</strong> 空间中的一点由x, y, z等参数来表示，一般来说参数的数量与维数相等，二维空间的点用{x, y}参数，四维空间的点用{x, y, z, w}参数。但是对于空间的点加以约束，则会减少参数的数量，比如三维空间的点在某一单位球面上，原本三个参数{x, y, z}才能表达的点现在只需要两个参数{u, v}就可以表达。如果{u, v}是单位向量，也可以称{u, v}是{x, y, z}的特征向量。</p>
<p><strong>空间映射理解</strong> <span class="math inline">\(x^{2}+y^{2}+z^{2}+w^{2}=1\)</span>中取x、y和z来表示超球。四维空间投影到三维超平面（w=0）可能是一个two-sphere。当投影点在整个two-sphere的边缘时，w一定为0，值得一提的是在这个空间内的四元数是一个纯四元数。当投影点落在two-sphere的内部时，也分为两种情况，w&gt;0和w&lt;0。但是可以发现这两种情况下对应的特征向量是一样的，所以将旋转矩阵向四元数转换时，是有两个对应值的，四元数的范围是2倍覆盖于3D旋转（2:1 mapping）。</p>
<p>四元数作为四维空间中一个超球上面的点，主要用于描述3D旋转。在复数域<span class="math inline">\(\mathbb{C}\)</span>，可以用一个复数<span class="math inline">\(e^{i\theta}\)</span>表示2D的旋转，类似的，3D空间也可以用单位四元数表示旋转。假设某个旋转是绕单位向量<span class="math inline">\(\mathbf{\hat{n}}=[n_x,n_y,n_z]^T\)</span>进行了角度为θ的旋转，那么这个旋转的四元数形式为： <span class="math display">\[\begin{equation}
\mathbf{q} = \left[\cos\frac{\theta}{2},n_x\sin\frac{\theta}{2}, n_y\sin\frac{\theta}{2}, n_z\sin\frac{\theta}{2}\right]^T
\end{equation}\]</span> 这是一个模长为1的单位四元数，实部是<span class="math inline">\(cos\frac{θ}{2}\)</span>，虚部有3个，两两互相正交，为一个单位轴乘以<span class="math inline">\(sin\frac{θ}{2}\)</span>。若四元数长度不为1，可以通过归一化转换为模长为1的四元数。式中的θ加上2π，得到一个相同的旋转，但此时对应的四元数变成了−q。因此在四元数中，任意的旋转都可以由两个互为相反数的四元数表示。同理，取θ为0，则得到一个没有任何旋转的四元数：<span class="math inline">\(\begin{equation}\mathbf{q}_0=\left[{\pm1,0,0,0}\right]^T\end{equation}\)</span>。 齐次形式<span class="math inline">\((w,x,y,z)\)</span>的四元数满足<span class="math inline">\(x^{2}+y^{2}+z^{2}+w^{2}=1\)</span>，有 <span class="math display">\[\left\{\begin{matrix}
x = n_{x}sin\frac{\theta}{2}\\
y = n_{y}sin\frac{\theta}{2}\\
z = n_{z}sin\frac{\theta}{2}\\
w = cos\frac{\theta}{2}
\end{matrix}\right.\]</span> 由于存在<span class="math inline">\(x^{2}+y^{2}+z^{2}+w^{2}=1\)</span>这个约束，四元数的自由度其实只有3，且每个四元数可以对应一个特征向量，即<span class="math inline">\(\hat{\textbf{n}}\)</span>。四元数并不是与特征向量一一对应的。 假设有一个空间三维点<span class="math inline">\(\mathbf{v} = [x,y,z]\in \mathbb{R}^3\)</span>，以及一个由旋转轴和夹角<span class="math inline">\(\mathbf{n},\theta\)</span> 指定的旋转。用一个虚四元数来描述该空间三维点：<span class="math inline">\(\mathbf{p} = [0, x, y, z] = [0, \mathbf{v}]\)</span>。然后用另一个四元数表示这个旋转：<span class="math inline">\(\mathbf{q}=[\cos \frac{\theta}{2}, \mathbf{n} \sin \frac{\theta}{2} ]\)</span>，那么旋转后的点<span class="math inline">\(\mathbf{p}&#39;\)</span>即可表示为这样的乘积： <span class="math display">\[\begin{equation} \mathbf{p}&#39; = \mathbf{q} \mathbf{p} \mathbf{q}^{-1} \end{equation}\]</span> 可以验证，计算结果的实部为<span class="math inline">\(\mathbf{n}^T(\mathbf{n} \times \mathbf{v})=0\)</span>，故计算结果为纯虚四元数。其虚部的三个分量表示旋转后3D点的坐标。</p>
<h3 id="四元数的运算">四元数的运算</h3>
<p>四元数和通常复数一样，可以进行一系列的运算。常见的有四则运算、内积、求逆、共轭、求指数／对数等等。表示姿态时，它还可以进行插值。 现有两个四元数<span class="math inline">\(\mathbf{q}_a,\mathbf{q}_b\)</span>，它们的向量表示为<span class="math inline">\([s_a, \mathbf{v}_a], [s_b, \mathbf{v}_b]\)</span>，或者原始四元数表示为<span class="math inline">\(s_a+x_ai+y_aj+z_ak, s_b+x_bi+y_bj+z_bk.\)</span>，则有：</p>
<ul>
<li>加减法 <span class="math display">\[\begin{equation} \mathbf{q}_a \pm \mathbf{q}_b = \left[ s_a \pm s_b, \mathbf{v}_a \pm \mathbf{v}_b \right]\end{equation}\]</span></li>
<li>乘法
$$\begin{equation} \begin{array}{lll} \mathbf{q}_a \mathbf{q}_b &=&  {s_a}{s_b} - {x_a}{x_b} - {y_a}{y_b} - {z_a}{z_b}\\   &&+ \left( {{s_a}{x_b} + {x_a}{s_b} + {y_a}{z_b} - {z_a}{y_b}} \right)i\\   &&+ \left( {{s_a}{y_b} - {x_a}{z_b} + {y_a}{s_b} + {z_a}{b_b}} \right)j\\   &&+ \left( {{s_a}{z_b} + {x_a}{y_b} - {x_b}{y_a} + {z_a}{s_b}} \right)k  \end{array} \end{equation}$$ 写成向量形式并利用内外积运算表达： <span class="math display">\[\begin{equation} \mathbf{q}_a \mathbf{q}_b = \left[ s_a s_b - \mathbf{v}_a \cdot \mathbf{v}_b, s_a\mathbf{v}_b + s_b\mathbf{v}_a + \mathbf{v}_a \times \mathbf{v}_b \right] \end{equation}\]</span> 在该乘法定义下，两个实的四元数乘积仍是实的，这与复数也是一致的。然而，注意到，由于最后一项外积的存在，该乘法通常是不可交换的，除非<span class="math inline">\(\mathbf{v}_a\)</span>和<span class="math inline">\(\mathbf{v}_b\)</span>在<span class="math inline">\(\mathbb{R}^3\)</span>中共线。</li>
<li>模长 四元数的模长定义为： <span class="math display">\[\begin{equation}  \| \mathbf{q}_a \| = \sqrt{ s_a^2 + x_a^2 + y_a^2 + z_a^2 } = \sqrt{\mathbf{q}_a^{*T} \mathbf{q}_a} \end{equation}\]</span> 可以验证，两个四元数乘积的模即为模的乘积。这保证单位四元数相乘后仍是单位四元数。 <span class="math display">\[\begin{equation}  \| \mathbf{q}_a \mathbf{q}_b \| = \|\mathbf{q}_a \| \| \mathbf{q}_b \| \end{equation}\]</span></li>
<li>逆 <span class="math display">\[\begin{equation} \mathbf{q}^{-1} = \mathbf{q}^* / \| \mathbf{q} \| ^2 \end{equation}\]</span> 按此定义，四元数和自己的逆的乘积为实四元数的1： <span class="math display">\[\begin{equation} \mathbf{q} \mathbf{q}^{-1} = \mathbf{q}^{-1} \mathbf{q} = 1 \end{equation}\]</span> 同时，乘积的逆有和矩阵相似的性质： <span class="math display">\[\begin{equation}  \left( \mathbf{q}_a \mathbf{q}_b \right)^{-1} = \mathbf{q}_b^{-1} \mathbf{q}_a^{-1} \end{equation}\]</span> 对于单位四元数，即<span class="math inline">\(\|\mathbf{q}\|=1\)</span>，它的逆即是它的共轭四元数。</li>
<li>数乘与点乘 和向量相似，四元数可以与数相乘： <span class="math display">\[\begin{equation}  k \mathbf{q} = \left[ ks, k\mathbf{v} \right] \end{equation}\]</span> 点乘是指两个四元数每个位置上的数值分别相乘： <span class="math display">\[\begin{equation} \mathbf{q}_a \cdot \mathbf{q}_b = s_a s_b + x_a x_b i + y_a y_b j + z_a z_b k \end{equation}\]</span></li>
</ul>
<h3 id="四元数到旋转矩阵的转换">四元数到旋转矩阵的转换</h3>
<p>由于任意单位四元数都可表示为一个3D旋转，即SO(3)中的元素，我们可以找到一个旋转矩阵与之对应。最简单的方式是由四元数q解出旋转角θ和旋转轴n，但那样要计算一个arccos函数，代价较大。实际上这个计算是可以通过一定的计算技巧绕过的。为省略篇幅，我们直接给出四元数到旋转矩阵的转换方式。 <span class="math display">\[\begin{equation} \mathbf{R} = \left[ {\begin{array}{*{20}{c}} {1 - 2q_2^2 - 2q_3^2}&amp;{2{q_1}{q_2} + 2{q_0}{q_3}}&amp;{2{q_1}{q_3} - 2{q_0}{q_2}}\\ {2{q_1}{q_2} - 2{q_0}{q_3}}&amp;{1 - 2q_1^2 - 2q_3^2}&amp;{2{q_2}{q_3} + 2{q_0}{q_1}}\\ {2{q_1}{q_3} + 2{q_0}{q_2}}&amp;{2{q_2}{q_3} - 2{q_0}{q_1}}&amp;{1 - 2q_1^2 - 2q_2^2} \end{array}} \right] \end{equation}\]</span> 反之，由旋转矩阵到四元数的转换如下。假设矩阵为<span class="math inline">\(\mathbf{R}=\{ m_{ij}\}, i, j \in \left[ 1, 2,3 \right]\)</span>，其对应的四元数q由下式给出： $$\begin{equation} {q_0} = \frac{{\sqrt {tr(R) + 1} }}{2},{q_1} = \frac{{{m_{23}} - {m_{32}}}}{{4{q_0}}},{q_2} = \frac{{{m_{31}} - {m_{13}}}}{{4{q_0}}},{q_3} = \frac{{{m_{12}} - {m_{21}}}}{{4{q_0}}} \end{equation}$$ 其中tr(R)表示R矩阵的迹，也即矩阵R的主对角线（从左上方至右下方的对角线）上各个元素的总和。由于q和−q表示同一个旋转，事实上一个R的四元数表示并不是惟一的。存在其他三种与上式类似的计算方式，而本书省略了。实际编程中，当q0接近0时，其余三个分量会非常大，导致解不稳定，此时会考虑使用剩下的几种方式计算。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/gaoxiang12/p/5120175.html" target="_blank" rel="noopener">视觉SLAM中的数学基础 第二篇 四元数</a></li>
<li><a href="http://www.selfgleam.com/quaternion-camera.html" target="_blank" rel="noopener">四元数相机</a></li>
<li><a href="http://zhaoxuhui.top/blog/2018/03/13/RelationBetweenQ4&amp;R&amp;Euler.html" target="_blank" rel="noopener">欧拉角、四元数、旋转矩阵推导及相互关系</a></li>
<li><a href="https://krasjet.github.io/quaternion/quaternion.pdf" target="_blank" rel="noopener">四元数与三维旋转</a></li>
<li><a href="https://eater.net/quaternions" target="_blank" rel="noopener">Visualizing quaternions</a></li>
</ul>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>四元数</tag>
      </tags>
  </entry>
  <entry>
    <title>epsg-4326-vs-3857</title>
    <url>/2020/03/19/epsg-4326-vs-3857/</url>
    <content><![CDATA[<h2 id="基准">基准</h2>
<p>每种地图和空间数据集都有一个大地基准，而且在地球的不同地方使用着不同的基准。基准是基于特定椭球体的地理坐标系，原点位于特定位置。NOAA的<a href="https://www.ngs.noaa.gov/corbin/class_description/NGS_Datums_vid1/" target="_blank" rel="noopener">视频</a>中较好的介绍了基准的概念。 <a id="more"></a></p>
<h2 id="epsg-4326">EPSG 4326</h2>
<p>即WGS84，由GeoJSON定义，以经纬度表示。无法在二维平面地图上可视化WGS84坐标系，大多数软件程序使用等角投影（Plate-Carrée）投影这些坐标（Esri使用EPSG：54001）。</p>
<h2 id="epsg-3857">EPSG 3857</h2>
<p>采用WGS84坐标系并将其投影到正方形上。在大多数情况下，网络地图依赖于以WGS84坐标存储的数据（在某些程序中称为“非投影”数据），然后使用Pseudo-Mercator可视化数据。 如上所述，WGS84是未投影的，该数据没有可视化表示。 因此如果说要在WGS84中查看其数据，则实际上是希望在Plate-Carrée投影中查看其数据，该投影实际上在页面创建了线性笛卡尔图。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://lyzidiamond.com/posts/4326-vs-3857" target="_blank" rel="noopener">epsg 4326 vs 3857(projection etc)</a></li>
</ul>
]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>epsg</tag>
        <tag>datum</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-git-deploy</title>
    <url>/2020/03/18/hexo-git-deploy/</url>
    <content><![CDATA[<h2 id="git-hook方式">git hook方式</h2>
<h3 id="本地">本地</h3>
<p>本地部署工具</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>在hexo站点配置文件_config.yml中添加deploy参数： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- type: git</span><br><span class="line">  repo: git@vps-ip:&#x2F;home&#x2F;git&#x2F;hexo.git</span><br></pre></td></tr></table></figure> <a id="more"></a></p>
<h3 id="服务端">服务端</h3>
<p>服务端添加用户</p>
<p><code>adduser git</code></p>
<p>设置用户权限，在/etc/sudoers中增加如下内容： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br><span class="line">git   ALL=(ALL)     ALL //添加一行git用户权限</span><br></pre></td></tr></table></figure> 同时增加git用户对相关文件夹的读写权限： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown git:git -R /home/git</span><br><span class="line">chown git:git -R /var/www/html</span><br></pre></td></tr></table></figure> 然后将本地ssh公钥上传，并在服务端建立网页共享git库。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/git/.ssh &amp;&amp; <span class="built_in">cd</span> /home/git/.ssh</span><br><span class="line">vim authorized_keys</span><br><span class="line">mkdir /home/git/hexo.git</span><br><span class="line"><span class="built_in">cd</span> /home/git/hexo.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure> 接着配置hooks</p>
<p><code>vim hooks/post-receive</code></p>
<p>添加如下内容： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/html --git-dir=/home/git/hexo.git checkout -f</span><br></pre></td></tr></table></figure> 设置权限</p>
<p><code>chmod +x post-receive</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>cesium-ctb-terrain-gen</title>
    <url>/2020/03/18/cesium-ctb-terrain-gen/</url>
    <content><![CDATA[<h2 id="下载tif">下载tif</h2>
<h3 id="可用网站">可用网站</h3>
<ul>
<li><a href="https://worlddem-database.terrasar.com/" target="_blank" rel="noopener">AIRBUS worldDEM-terrasar</a></li>
<li><a href="http://dwtkns.com/srtm30m/" target="_blank" rel="noopener">srtm30m</a></li>
<li><a href="http://dwtkns.com/srtm/" target="_blank" rel="noopener">srtm90m</a></li>
<li><a href="https://scihub.copernicus.eu/dhus/#/home" target="_blank" rel="noopener">ESA哥白尼计划</a></li>
<li><a href="https://earthexplorer.usgs.gov/" target="_blank" rel="noopener">USGS-earthexplorer</a></li>
<li><a href="https://prd-tnm.s3.amazonaws.com/index.html?prefix=StagedProducts/Elevation/1m/IMG/" target="_blank" rel="noopener">USGS-NED-1m-db in USA</a></li>
<li><a href="https://viewer.nationalmap.gov/basic/?basemap=b1&amp;category=ned,nedsrc&amp;title=3DEP%20View" target="_blank" rel="noopener">USGS-nationalmap-3DEP</a></li>
<li><a href="https://eos.com/landviewer/?lat=34.26368&amp;lng=109.19109&amp;z=11" target="_blank" rel="noopener">earth observing system-landviewer</a></li>
<li><a href="https://search.asf.alaska.edu" target="_blank" rel="noopener">NASA阿拉斯加卫星设施</a></li>
<li><a href="https://nsidc.org/data/highmountainasia/data-summaries" target="_blank" rel="noopener">NASA青藏高原8m</a></li>
<li><a href="https://www.eorc.jaxa.jp/ALOS/en/aw3d30/index.htm" target="_blank" rel="noopener">AW3D30</a> <a id="more"></a></li>
</ul>
<h2 id="处理tif">处理tif</h2>
<p>使用ArcMap QGIS等工具，合成tif瓦片，设置pixeltype数据类型float为int，再设置nodata值为0。</p>
<h2 id="生成terrain">生成terrain</h2>
<h3 id="ctb下载编译">ctb下载编译</h3>
<h3 id="使用ctb生成terrain文件">使用ctb生成terrain文件</h3>
<p>注：生成时间长，数据量大。</p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>ctb</tag>
        <tag>terrain</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="use-next-theme">Use next theme</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>in _config.yml, set <code>theme: next</code>.</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
